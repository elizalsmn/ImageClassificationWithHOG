{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Download dependencies and data (Do not run if data is already downloaded)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: kaggle in /Users/karinanathalie/opt/anaconda3/lib/python3.9/site-packages (1.6.17)\n",
      "Requirement already satisfied: six>=1.10 in /Users/karinanathalie/opt/anaconda3/lib/python3.9/site-packages (from kaggle) (1.16.0)\n",
      "Requirement already satisfied: certifi>=2023.7.22 in /Users/karinanathalie/opt/anaconda3/lib/python3.9/site-packages (from kaggle) (2024.8.30)\n",
      "Requirement already satisfied: python-dateutil in /Users/karinanathalie/opt/anaconda3/lib/python3.9/site-packages (from kaggle) (2.8.2)\n",
      "Requirement already satisfied: requests in /Users/karinanathalie/opt/anaconda3/lib/python3.9/site-packages (from kaggle) (2.31.0)\n",
      "Requirement already satisfied: tqdm in /Users/karinanathalie/opt/anaconda3/lib/python3.9/site-packages (from kaggle) (4.65.0)\n",
      "Requirement already satisfied: python-slugify in /Users/karinanathalie/opt/anaconda3/lib/python3.9/site-packages (from kaggle) (8.0.1)\n",
      "Requirement already satisfied: urllib3 in /Users/karinanathalie/opt/anaconda3/lib/python3.9/site-packages (from kaggle) (1.26.15)\n",
      "Requirement already satisfied: bleach in /Users/karinanathalie/opt/anaconda3/lib/python3.9/site-packages (from kaggle) (6.0.0)\n",
      "Requirement already satisfied: webencodings in /Users/karinanathalie/opt/anaconda3/lib/python3.9/site-packages (from bleach->kaggle) (0.5.1)\n",
      "Requirement already satisfied: text-unidecode>=1.3 in /Users/karinanathalie/opt/anaconda3/lib/python3.9/site-packages (from python-slugify->kaggle) (1.3)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /Users/karinanathalie/opt/anaconda3/lib/python3.9/site-packages (from requests->kaggle) (3.1.0)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /Users/karinanathalie/opt/anaconda3/lib/python3.9/site-packages (from requests->kaggle) (3.4)\n",
      "^C\n"
     ]
    }
   ],
   "source": [
    "!pip install kaggle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#login to kaggle via cli to download the dataset\n",
    "!mkdir ~/.kaggle\n",
    "!touch ~/.kaggle/kaggle.json\n",
    "!chmod 600 ~/.kaggle/kaggle.json\n",
    "import json\n",
    "\n",
    "username = \"<your-username>\"\n",
    "key = \"<your-key>\"\n",
    "dict = {\"username\":username,\"key\":key}\n",
    "with open('/root/.kaggle/kaggle.json', 'w') as file:\n",
    "    json.dump(dict, file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#download the dataset\n",
    "!kaggle competitions download -c hku-comp3314-2024-1a-a3-image-classification-challenge"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#unzip the dataset\n",
    "!unzip hku-comp3314-2024-1a-a3-image-classification-challenge.zip"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Analysis and Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import required libraries for this section\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training data shape: (50000, 2)\n",
      "Examples of training data:\n",
      "       im_name  label\n",
      "0  00016cd.jpg      6\n",
      "1  0001808.jpg      2\n",
      "2  0002399.jpg      1\n",
      "3  0003973.jpg      3\n",
      "4  00061cc.jpg      4\n",
      "5  0007365.jpg      5\n",
      "\n",
      "\n",
      "Test data shape: (10000, 2)\n",
      "Examples of test data:\n",
      "       im_name  label\n",
      "0  d59d350.jpg      0\n",
      "1  d59e3e9.jpg      0\n",
      "2  d59e68e.jpg      0\n",
      "3  d59ef00.jpg      0\n",
      "4  d59f154.jpg      0\n",
      "5  d59fa50.jpg      0\n"
     ]
    }
   ],
   "source": [
    "# Load training data\n",
    "train_df = pd.read_csv('train.csv')  \n",
    "print('Training data shape:', train_df.shape)\n",
    "print('Examples of training data:')\n",
    "print(train_df.head(6))\n",
    "print('\\n')\n",
    "\n",
    "# Load test data\n",
    "test_df = pd.read_csv('test.csv') \n",
    "print('Test data shape:', test_df.shape)\n",
    "print('Examples of test data:')\n",
    "print(test_df.head(6))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "label\n",
       "0    5010\n",
       "1    5012\n",
       "2    5038\n",
       "3    5007\n",
       "4    4995\n",
       "5    4993\n",
       "6    4955\n",
       "7    5000\n",
       "8    5020\n",
       "9    4970\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Display dataset statistics\n",
    "category_counts = train_df['label'].value_counts().sort_index()\n",
    "category_counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "category_counts_df = pd.DataFrame(list(category_counts.items()), columns=['Category', 'Frequency'])\n",
    "\n",
    "# Plot histogram\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.bar(category_counts_df['Category'], category_counts_df['Frequency'], color='skyblue', edgecolor='black')\n",
    "plt.title(\"Histogram of Category Counts\")\n",
    "plt.xlabel(\"Category\")\n",
    "plt.ylabel(\"Frequency\")\n",
    "plt.xticks(ticks=category_counts_df['Category'], labels=category_counts_df['Category'], rotation=45)\n",
    "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 10 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#randomly select one of each image from 10 labels and display them\n",
    "fig, axes = plt.subplots(nrows=2, ncols=5, figsize=(10, 5))\n",
    "\n",
    "for label in range(10):\n",
    "    img_path = train_df[train_df['label'] == label].sample(1)['im_name'].values[0]\n",
    "    img = plt.imread(f'train_ims/{img_path}')\n",
    "    ax = axes[label//5, label%5]\n",
    "    ax.imshow(img)\n",
    "    ax.axis('off')\n",
    "    ax.set_title(f'label: {label}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Classifier Exploration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import required libraries for this section\n",
    "import cv2\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Prepare the data for training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#define accuracy function\n",
    "def get_accuracy(y_true, y_pred):\n",
    "    return np.mean(y_true == y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# define the function to flatten the image\n",
    "def flatten_image(image_path):\n",
    "    # Load the image\n",
    "    img = cv2.imread(image_path)\n",
    "    \n",
    "    # Resize the image\n",
    "    img = cv2.resize(img, (64, 64))\n",
    "    \n",
    "    # Flatten the image to a 1D vector\n",
    "    return img.flatten()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to train PCA on a dataset\n",
    "def train_pca(flat_images, n_components=32):\n",
    "    pca = PCA(n_components=n_components)\n",
    "    pca.fit(flat_images)\n",
    "    return pca"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Encode the image to numerical values\n",
    "image_paths = train_df['im_name'].values\n",
    "image_paths = [f'train_ims/{path}' for path in image_paths]\n",
    "labels = train_df['label'].values\n",
    "\n",
    "# Load and flatten all images\n",
    "flat_images = np.array([flatten_image(img) for img in image_paths])\n",
    "\n",
    "# Train PCA on the flattened images\n",
    "pca = train_pca(flat_images, n_components=64)\n",
    "\n",
    "# Transform all images using PCA\n",
    "X = pca.transform(flat_images)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# define Y variable\n",
    "Y = labels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Split the dataset into training and testing sets for internal validation\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42, stratify=Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(40000, 64) (10000, 64) (40000,) (10000,)\n"
     ]
    }
   ],
   "source": [
    "print(X_train.shape, X_test.shape, Y_train.shape, Y_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Comparing each algorithm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Kernel SVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy when C = 0.01: 0.3496\n",
      "Accuracy when C = 0.1: 0.4442\n",
      "Accuracy when C = 1: 0.5149\n",
      "Accuracy when C = 8: 0.536\n",
      "\n",
      "\n",
      "the best accuracy is when C = 8 with score = 0.536\n"
     ]
    }
   ],
   "source": [
    "C_list = [0.01, 0.1, 1, 8]\n",
    "accuracy = []\n",
    "for c in C_list:\n",
    "    svm_model = SVC(kernel='rbf', C = c, gamma='scale', random_state=42)  # RBF kernel with hyperparameter tuning\n",
    "    svm_model.fit(X_train, Y_train)\n",
    "\n",
    "    Y_pred = svm_model.predict(X_test)\n",
    "\n",
    "    print(f\"Accuracy when C = {c}:\", get_accuracy(Y_test, Y_pred))\n",
    "    accuracy.append(get_accuracy(Y_test, Y_pred))\n",
    "\n",
    "print('\\n')\n",
    "print(f'the best accuracy is when C = {C_list[accuracy.index(max(accuracy))]} with score = {max(accuracy)}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# create a confusion matrix\n",
    "conf_matrix = confusion_matrix(Y_test, Y_pred)\n",
    "\n",
    "# Plot the confusion matrix\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(conf_matrix, annot=True, fmt=\"d\", cmap=\"Blues\", xticklabels=set(Y_test), yticklabels=set(Y_test))\n",
    "plt.title(f\"Confusion Matrix for C = {8}\")\n",
    "plt.xlabel(\"Predicted Labels\")\n",
    "plt.ylabel(\"True Labels\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy when N = 50: 0.4339\n",
      "Accuracy when N = 100: 0.461\n",
      "Accuracy when N = 500: 0.4924\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[29], line 5\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m n \u001b[38;5;129;01min\u001b[39;00m N_list:\n\u001b[1;32m      4\u001b[0m     rf_model \u001b[38;5;241m=\u001b[39m RandomForestClassifier(n_estimators\u001b[38;5;241m=\u001b[39mn, random_state\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m42\u001b[39m)  \u001b[38;5;66;03m# Random Forest with hyperparameter tuning\u001b[39;00m\n\u001b[0;32m----> 5\u001b[0m     \u001b[43mrf_model\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mY_train\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      7\u001b[0m     Y_pred \u001b[38;5;241m=\u001b[39m rf_model\u001b[38;5;241m.\u001b[39mpredict(X_test)\n\u001b[1;32m      9\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mAccuracy when N = \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mn\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m:\u001b[39m\u001b[38;5;124m\"\u001b[39m, get_accuracy(Y_test, Y_pred))\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/sklearn/base.py:1473\u001b[0m, in \u001b[0;36m_fit_context.<locals>.decorator.<locals>.wrapper\u001b[0;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1466\u001b[0m     estimator\u001b[38;5;241m.\u001b[39m_validate_params()\n\u001b[1;32m   1468\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m config_context(\n\u001b[1;32m   1469\u001b[0m     skip_parameter_validation\u001b[38;5;241m=\u001b[39m(\n\u001b[1;32m   1470\u001b[0m         prefer_skip_nested_validation \u001b[38;5;129;01mor\u001b[39;00m global_skip_validation\n\u001b[1;32m   1471\u001b[0m     )\n\u001b[1;32m   1472\u001b[0m ):\n\u001b[0;32m-> 1473\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfit_method\u001b[49m\u001b[43m(\u001b[49m\u001b[43mestimator\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:489\u001b[0m, in \u001b[0;36mBaseForest.fit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    478\u001b[0m trees \u001b[38;5;241m=\u001b[39m [\n\u001b[1;32m    479\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_make_estimator(append\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m, random_state\u001b[38;5;241m=\u001b[39mrandom_state)\n\u001b[1;32m    480\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(n_more_estimators)\n\u001b[1;32m    481\u001b[0m ]\n\u001b[1;32m    483\u001b[0m \u001b[38;5;66;03m# Parallel loop: we prefer the threading backend as the Cython code\u001b[39;00m\n\u001b[1;32m    484\u001b[0m \u001b[38;5;66;03m# for fitting the trees is internally releasing the Python GIL\u001b[39;00m\n\u001b[1;32m    485\u001b[0m \u001b[38;5;66;03m# making threading more efficient than multiprocessing in\u001b[39;00m\n\u001b[1;32m    486\u001b[0m \u001b[38;5;66;03m# that case. However, for joblib 0.12+ we respect any\u001b[39;00m\n\u001b[1;32m    487\u001b[0m \u001b[38;5;66;03m# parallel_backend contexts set at a higher level,\u001b[39;00m\n\u001b[1;32m    488\u001b[0m \u001b[38;5;66;03m# since correctness does not rely on using threads.\u001b[39;00m\n\u001b[0;32m--> 489\u001b[0m trees \u001b[38;5;241m=\u001b[39m \u001b[43mParallel\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    490\u001b[0m \u001b[43m    \u001b[49m\u001b[43mn_jobs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mn_jobs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    491\u001b[0m \u001b[43m    \u001b[49m\u001b[43mverbose\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mverbose\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    492\u001b[0m \u001b[43m    \u001b[49m\u001b[43mprefer\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mthreads\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m    493\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    494\u001b[0m \u001b[43m    \u001b[49m\u001b[43mdelayed\u001b[49m\u001b[43m(\u001b[49m\u001b[43m_parallel_build_trees\u001b[49m\u001b[43m)\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    495\u001b[0m \u001b[43m        \u001b[49m\u001b[43mt\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    496\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbootstrap\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    497\u001b[0m \u001b[43m        \u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    498\u001b[0m \u001b[43m        \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    499\u001b[0m \u001b[43m        \u001b[49m\u001b[43msample_weight\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    500\u001b[0m \u001b[43m        \u001b[49m\u001b[43mi\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    501\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;28;43mlen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mtrees\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    502\u001b[0m \u001b[43m        \u001b[49m\u001b[43mverbose\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mverbose\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    503\u001b[0m \u001b[43m        \u001b[49m\u001b[43mclass_weight\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mclass_weight\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    504\u001b[0m \u001b[43m        \u001b[49m\u001b[43mn_samples_bootstrap\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mn_samples_bootstrap\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    505\u001b[0m \u001b[43m        \u001b[49m\u001b[43mmissing_values_in_feature_mask\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mmissing_values_in_feature_mask\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    506\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    507\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43;01mfor\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[43mi\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mt\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;129;43;01min\u001b[39;49;00m\u001b[43m \u001b[49m\u001b[38;5;28;43menumerate\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mtrees\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    508\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    510\u001b[0m \u001b[38;5;66;03m# Collect newly grown trees\u001b[39;00m\n\u001b[1;32m    511\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mestimators_\u001b[38;5;241m.\u001b[39mextend(trees)\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/sklearn/utils/parallel.py:74\u001b[0m, in \u001b[0;36mParallel.__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m     69\u001b[0m config \u001b[38;5;241m=\u001b[39m get_config()\n\u001b[1;32m     70\u001b[0m iterable_with_config \u001b[38;5;241m=\u001b[39m (\n\u001b[1;32m     71\u001b[0m     (_with_config(delayed_func, config), args, kwargs)\n\u001b[1;32m     72\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m delayed_func, args, kwargs \u001b[38;5;129;01min\u001b[39;00m iterable\n\u001b[1;32m     73\u001b[0m )\n\u001b[0;32m---> 74\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43msuper\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[38;5;21;43m__call__\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43miterable_with_config\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/joblib/parallel.py:1918\u001b[0m, in \u001b[0;36mParallel.__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1916\u001b[0m     output \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_get_sequential_output(iterable)\n\u001b[1;32m   1917\u001b[0m     \u001b[38;5;28mnext\u001b[39m(output)\n\u001b[0;32m-> 1918\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m output \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mreturn_generator \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;28;43mlist\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43moutput\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1920\u001b[0m \u001b[38;5;66;03m# Let's create an ID that uniquely identifies the current call. If the\u001b[39;00m\n\u001b[1;32m   1921\u001b[0m \u001b[38;5;66;03m# call is interrupted early and that the same instance is immediately\u001b[39;00m\n\u001b[1;32m   1922\u001b[0m \u001b[38;5;66;03m# re-used, this id will be used to prevent workers that were\u001b[39;00m\n\u001b[1;32m   1923\u001b[0m \u001b[38;5;66;03m# concurrently finalizing a task from the previous call to run the\u001b[39;00m\n\u001b[1;32m   1924\u001b[0m \u001b[38;5;66;03m# callback.\u001b[39;00m\n\u001b[1;32m   1925\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_lock:\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/joblib/parallel.py:1847\u001b[0m, in \u001b[0;36mParallel._get_sequential_output\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1845\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_dispatched_batches \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m\n\u001b[1;32m   1846\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_dispatched_tasks \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m\n\u001b[0;32m-> 1847\u001b[0m res \u001b[38;5;241m=\u001b[39m \u001b[43mfunc\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1848\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_completed_tasks \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m\n\u001b[1;32m   1849\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mprint_progress()\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/sklearn/utils/parallel.py:136\u001b[0m, in \u001b[0;36m_FuncWrapper.__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    134\u001b[0m     config \u001b[38;5;241m=\u001b[39m {}\n\u001b[1;32m    135\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m config_context(\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mconfig):\n\u001b[0;32m--> 136\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfunction\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/sklearn/ensemble/_forest.py:192\u001b[0m, in \u001b[0;36m_parallel_build_trees\u001b[0;34m(tree, bootstrap, X, y, sample_weight, tree_idx, n_trees, verbose, class_weight, n_samples_bootstrap, missing_values_in_feature_mask)\u001b[0m\n\u001b[1;32m    189\u001b[0m     \u001b[38;5;28;01melif\u001b[39;00m class_weight \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mbalanced_subsample\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[1;32m    190\u001b[0m         curr_sample_weight \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m=\u001b[39m compute_sample_weight(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mbalanced\u001b[39m\u001b[38;5;124m\"\u001b[39m, y, indices\u001b[38;5;241m=\u001b[39mindices)\n\u001b[0;32m--> 192\u001b[0m     \u001b[43mtree\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_fit\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    193\u001b[0m \u001b[43m        \u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    194\u001b[0m \u001b[43m        \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    195\u001b[0m \u001b[43m        \u001b[49m\u001b[43msample_weight\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcurr_sample_weight\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    196\u001b[0m \u001b[43m        \u001b[49m\u001b[43mcheck_input\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m    197\u001b[0m \u001b[43m        \u001b[49m\u001b[43mmissing_values_in_feature_mask\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mmissing_values_in_feature_mask\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    198\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    199\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    200\u001b[0m     tree\u001b[38;5;241m.\u001b[39m_fit(\n\u001b[1;32m    201\u001b[0m         X,\n\u001b[1;32m    202\u001b[0m         y,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    205\u001b[0m         missing_values_in_feature_mask\u001b[38;5;241m=\u001b[39mmissing_values_in_feature_mask,\n\u001b[1;32m    206\u001b[0m     )\n",
      "File \u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/sklearn/tree/_classes.py:472\u001b[0m, in \u001b[0;36mBaseDecisionTree._fit\u001b[0;34m(self, X, y, sample_weight, check_input, missing_values_in_feature_mask)\u001b[0m\n\u001b[1;32m    461\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    462\u001b[0m     builder \u001b[38;5;241m=\u001b[39m BestFirstTreeBuilder(\n\u001b[1;32m    463\u001b[0m         splitter,\n\u001b[1;32m    464\u001b[0m         min_samples_split,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    469\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mmin_impurity_decrease,\n\u001b[1;32m    470\u001b[0m     )\n\u001b[0;32m--> 472\u001b[0m \u001b[43mbuilder\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbuild\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtree_\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msample_weight\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmissing_values_in_feature_mask\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    474\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_outputs_ \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m \u001b[38;5;129;01mand\u001b[39;00m is_classifier(\u001b[38;5;28mself\u001b[39m):\n\u001b[1;32m    475\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_classes_ \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mn_classes_[\u001b[38;5;241m0\u001b[39m]\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "N_list = [50, 100, 500, 750]\n",
    "accuracy = []\n",
    "for n in N_list:\n",
    "    rf_model = RandomForestClassifier(n_estimators=n, random_state=42)  # Random Forest with hyperparameter tuning\n",
    "    rf_model.fit(X_train, Y_train)\n",
    "\n",
    "    Y_pred = rf_model.predict(X_test)\n",
    "\n",
    "    print(f\"Accuracy when N = {n}:\", get_accuracy(Y_test, Y_pred))\n",
    "\n",
    "    accuracy.append(get_accuracy(Y_test, Y_pred))\n",
    "\n",
    "print('\\n')\n",
    "print(f'the best accuracy is when n_estimators = {N_list[accuracy.index(max(accuracy))]} with score = {max(accuracy)}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create a confusion matrix\n",
    "conf_matrix = confusion_matrix(Y_test, Y_pred)\n",
    "\n",
    "# Plot the confusion matrix\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(conf_matrix, annot=True, fmt=\"d\", cmap=\"Greens\", xticklabels=set(Y_test), yticklabels=set(Y_test))\n",
    "plt.title(f\"Confusion Matrix for N = {750}\")\n",
    "plt.xlabel(\"Predicted Labels\")\n",
    "plt.ylabel(\"True Labels\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/innowing-391/anaconda3/envs/social/lib/python3.11/site-packages/sklearn/linear_model/_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy when C = 0.01: 0.3849\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/innowing-391/anaconda3/envs/social/lib/python3.11/site-packages/sklearn/linear_model/_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy when C = 0.1: 0.3844\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/innowing-391/anaconda3/envs/social/lib/python3.11/site-packages/sklearn/linear_model/_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy when C = 10: 0.3848\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/innowing-391/anaconda3/envs/social/lib/python3.11/site-packages/sklearn/linear_model/_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy when C = 100: 0.3842\n",
      "Accuracy when C = 1: 0.3845\n",
      "\n",
      "\n",
      "the best accuracy is when C = 0.01 with score = 0.385\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/innowing-391/anaconda3/envs/social/lib/python3.11/site-packages/sklearn/linear_model/_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    }
   ],
   "source": [
    "C_list = [0.01, 0.1, 10, 100, 1]\n",
    "for c in C_list:\n",
    "    lr_model = LogisticRegression(C=c, random_state=42, max_iter = 500)  # Logistic Regression with hyperparameter tuning\n",
    "    lr_model.fit(X_train, Y_train)\n",
    "\n",
    "    Y_pred = lr_model.predict(X_test)\n",
    "\n",
    "    print(f\"Accuracy when C = {c}:\", get_accuracy(Y_test, Y_pred))\n",
    "\n",
    "    accuracy.append(get_accuracy(Y_test, Y_pred))\n",
    "\n",
    "print('\\n')\n",
    "print(f'the best accuracy is when C = {C_list[accuracy.index(max(accuracy))]} with score = {max(accuracy)}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# create a confusion matrix\n",
    "conf_matrix = confusion_matrix(Y_test, Y_pred)\n",
    "\n",
    "# Plot the confusion matrix\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(conf_matrix, annot=True, fmt=\"d\", cmap=\"Oranges\", xticklabels=set(Y_test), yticklabels=set(Y_test))\n",
    "plt.title(f\"Confusion Matrix for C = {1}\")\n",
    "plt.xlabel(\"Predicted Labels\")\n",
    "plt.ylabel(\"True Labels\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### KNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy when N = 1: 0.3746\n",
      "Accuracy when N = 3: 0.3648\n",
      "Accuracy when N = 5: 0.3813\n",
      "Accuracy when N = 7: 0.3829\n",
      "Accuracy when N = 9: 0.3889\n",
      "Accuracy when N = 12: 0.3871\n",
      "Accuracy when N = 20: 0.384\n",
      "Accuracy when N = 15: 0.3894\n",
      "\n",
      "\n",
      "the best accuracy is when n_estimators = 15 with score = 0.3894\n"
     ]
    }
   ],
   "source": [
    "N_list = [1, 3, 5, 7, 9, 12, 20, 15]\n",
    "accuracy = []\n",
    "for n in N_list:\n",
    "    knn_model = KNeighborsClassifier(n_neighbors=n, p=2, metric='minkowski')  # KNN with hyperparameter tuning\n",
    "    knn_model.fit(X_train, Y_train)\n",
    "\n",
    "    Y_pred = knn_model.predict(X_test)\n",
    "\n",
    "    print(f\"Accuracy when N = {n}:\", get_accuracy(Y_test, Y_pred))\n",
    "\n",
    "    accuracy.append(get_accuracy(Y_test, Y_pred))\n",
    "\n",
    "print('\\n')\n",
    "print(f'the best accuracy is when n_estimators = {N_list[accuracy.index(max(accuracy))]} with score = {max(accuracy)}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 800x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# create a confusion matrix\n",
    "conf_matrix = confusion_matrix(Y_test, Y_pred)\n",
    "\n",
    "# Plot the confusion matrix\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(conf_matrix, annot=True, fmt=\"d\", cmap=\"Greens\", xticklabels=set(Y_test), yticklabels=set(Y_test))\n",
    "plt.title(f\"Confusion Matrix for neighbors = {15}\")\n",
    "plt.xlabel(\"Predicted Labels\")\n",
    "plt.ylabel(\"True Labels\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ensemble Learning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#select best parameter of each model\n",
    "clf1 = SVC(kernel='rbf', C=8, random_state=0) #SVM\n",
    "clf2 = RandomForestClassifier(n_estimators=750, random_state=42) #Random Forest\n",
    "clf3 = LogisticRegression(C=1, random_state=42) # Logistic Regression\n",
    "clf4 = KNeighborsClassifier(n_neighbors=12, p=2, metric='minkowski') #KNN\n",
    "pipe1 = Pipeline([['sc', StandardScaler()], ['clf', clf1]])\n",
    "pipe2 = Pipeline([['sc', StandardScaler()], ['clf', clf3]])\n",
    "pipe3 = Pipeline([['sc', StandardScaler()], ['clf', clf4]])\n",
    "pipe4 = Pipeline([['sc', StandardScaler()], ['clf', clf2]])\n",
    "clf_labels = ['SVM (10)', 'Random Forest (750)', 'Logistic Regression (1)', 'KNN (12)']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.base import BaseEstimator\n",
    "from sklearn.base import ClassifierMixin\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from sklearn.base import clone\n",
    "from sklearn.pipeline import _name_estimators\n",
    "import numpy as np\n",
    "import operator\n",
    "\n",
    "class MajorityVoteClassifier(BaseEstimator, ClassifierMixin):\n",
    "    def __init__(self, classifiers, vote='classlabel', weights=None):\n",
    "        self.classifiers = classifiers\n",
    "        self.named_classifiers = {key: value for key, value in _name_estimators(classifiers)}\n",
    "        self.vote = vote\n",
    "        self.weights = weights\n",
    "        \n",
    "    def fit(self, X, y):\n",
    "        if self.vote not in ('probability', 'classlabel'):\n",
    "            raise ValueError(\"vote must be 'probability' or 'classlabel' ; got (vote=%r)\" % self.vote)\n",
    "        if self.weights and len(self.weights) != len(self.classifiers):\n",
    "            raise ValueError('Number of classifiers and weights must be equal'\n",
    "                             '; got %d weights, %d classifiers' % (len(self.weights), len(self.classifiers)))\n",
    "        self.lablenc_ = LabelEncoder()\n",
    "        self.lablenc_.fit(y)       \n",
    "        self.classes_ = self.lablenc_.classes_\n",
    "        self.classifiers_ = []\n",
    "        for clf in self.classifiers:\n",
    "            fitted_clf = clone(clf).fit(X, self.lablenc_.transform(y))\n",
    "            self.classifiers_.append(fitted_clf)\n",
    "        return self\n",
    "    \n",
    "    def predict(self, X):\n",
    "        if self.vote == 'probability':\n",
    "            maj_vote = np.argmax(self.predict_proba(X), axis=1)\n",
    "        else:\n",
    "            predictions = np.asarray([clf.predict(X) for clf in self.classifiers_]).T\n",
    "            maj_vote = np.apply_along_axis(\n",
    "                       lambda x: np.argmax(np.bincount(x, weights=self.weights)), axis=1, arr=predictions)\n",
    "        maj_vote = self.lablenc_.inverse_transform(maj_vote)\n",
    "        return maj_vote\n",
    "    \n",
    "    def predict_proba(self, X):\n",
    "        probas = np.asarray([clf.predict_proba(X) for clf in self.classifiers_])\n",
    "        avg_proba = np.average(probas, axis=0, weights=self.weights)\n",
    "        return avg_proba"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "mv_clf = MajorityVoteClassifier(classifiers=[pipe1, pipe2, pipe3, pipe4]) # create Majority Voting Classifier\n",
    "\n",
    "mv_clf.fit(X_train, Y_train) # fit the model\n",
    "\n",
    "y_pred = mv_clf.predict(X_test) # predict the test data\n",
    "\n",
    "print('Majority voting accuracy:', get_accuracy(Y_test, y_pred)) # print the accuracy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### To conclude, Kernel SVM outperforms other model in term of accuracy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Final Solution"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Methodology:\n",
    "1. We split the train data into 40,000 rows of training set and 10,000 rows of validation set. This is for internal obeservation to determine which ML algorithm and feature extractions techniques work the best.\n",
    "2. After achieving satisfactory result, we will retrain the whole 50,000 rows of the data with the same method. Then we label the test data and submit through kaggle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import required libraries for this section\n",
    "import cv2\n",
    "import numpy as np\n",
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.svm import SVC"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 1 (internal tuning)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [],
   "source": [
    "#get evaluation metrics\n",
    "def get_accuracy(y_true, y_pred):\n",
    "    return np.mean(y_true == y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Split for only observing accuracy purpose"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Split the dataset into training and testing sets\n",
    "X = train_df['im_name']\n",
    "Y = train_df['label']\n",
    "\n",
    "X_train_path, X_test_path, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42, stratify=Y) # split the data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Prepare data (Hog feature extraction and PCA)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [],
   "source": [
    "#function to extract hog features\n",
    "def extract_hog_features(image):\n",
    "    # Initialize HOG descriptor with the best parameters we have tested.\n",
    "    hog = cv2.HOGDescriptor(\n",
    "        _winSize = (64,64),\n",
    "        _blockSize = (32,32),\n",
    "        _blockStride = (16,16),\n",
    "        _cellSize = (8,8),\n",
    "        _nbins = 12,\n",
    "        _derivAperture=1,\n",
    "        _winSigma=-1,\n",
    "        _histogramNormType=0,\n",
    "        _L2HysThreshold=0.2,\n",
    "        _gammaCorrection=True,\n",
    "        _nlevels=1,\n",
    "        _signedGradient=True\n",
    ")\n",
    "    hog_features = hog.compute(image)\n",
    "    return hog_features.flatten()\n",
    "\n",
    "#function to include color channels in the feature extraction\n",
    "def extract_color_hog_features(image_path):\n",
    "    # Read image\n",
    "    image = cv2.imread(image_path)\n",
    "    if image is None:\n",
    "        print(f\"Warning: Image {image_path} could not be loaded.\")\n",
    "        return None\n",
    "    # Resize image to a fixed size (32x32)\n",
    "    image = cv2.resize(image, (64, 64))\n",
    "    # Split the image into its color channels\n",
    "    channels = cv2.split(image)\n",
    "    hog_features = []\n",
    "    for channel in channels:\n",
    "        features = extract_hog_features(channel)\n",
    "        hog_features.append(features)\n",
    "    # Concatenate HOG features from all channels\n",
    "    hog_features = np.concatenate(hog_features)\n",
    "    return hog_features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [],
   "source": [
    "#function to train pca for reduce dimensionality\n",
    "def train_pca(flat_images, n_components):\n",
    "    pca = PCA(n_components=n_components)\n",
    "    pca.fit(flat_images)\n",
    "    return pca"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(50000, 5184) (40000, 5184) (10000, 5184)\n"
     ]
    }
   ],
   "source": [
    "X_total = np.array([extract_color_hog_features(f'train_ims/{img}') for img in X]) #define X_total to train better pca (more data)\n",
    "X_train_features = np.array([extract_color_hog_features(f'train_ims/{img}') for img in X_train_path]) #extract features for training data\n",
    "X_test_features = np.array([extract_color_hog_features(f'train_ims/{img}') for img in X_test_path]) #extract features for testing data\n",
    "print(X_total.shape, X_train_features.shape, X_test_features.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8486937548732385\n"
     ]
    }
   ],
   "source": [
    "pca = train_pca(X_total, n_components=306) #train pca with X_total\n",
    "\n",
    "#get explained variance ratio (optimal is 0.8-0.85 to avoid overfitting)\n",
    "print(sum(pca.explained_variance_ratio_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(40000, 306) (10000, 306) (40000,) (10000,)\n"
     ]
    }
   ],
   "source": [
    "# reduce the dimensionality of the features for training\n",
    "X_train = pca.transform(X_train_features)\n",
    "X_test = pca.transform(X_test_features)\n",
    "print(X_train.shape, X_test.shape, Y_train.shape, Y_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Train the model (SVC with C=8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy when C = 8: 0.7289\n"
     ]
    }
   ],
   "source": [
    "svm_model = SVC(kernel='rbf', C = 8, gamma='scale', random_state=42)\n",
    "svm_model.fit(X_train, Y_train)\n",
    "\n",
    "Y_pred = svm_model.predict(X_test)\n",
    "\n",
    "print(f\"Accuracy when C = {8}:\", get_accuracy(Y_test, Y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[779,  14,  54,  25,  17,   7,   9,  14,  59,  24],\n",
       "       [ 22, 846,  10,  10,  12,   5,  12,   3,  28,  54],\n",
       "       [ 72,  17, 603,  82,  76,  54,  48,  33,  21,   2],\n",
       "       [ 37,  12,  70, 542,  52, 151,  54,  44,  16,  23],\n",
       "       [ 35,  15,  56,  80, 676,  46,  26,  42,  13,  10],\n",
       "       [ 11,   7,  55, 174,  61, 598,  37,  45,   6,   5],\n",
       "       [ 10,  12,  51,  71,  28,  19, 778,   3,  18,   1],\n",
       "       [ 14,   3,  36,  45,  61,  49,   7, 776,   2,   7],\n",
       "       [ 51,  28,  15,  15,   5,   2,   3,   5, 864,  16],\n",
       "       [ 23,  46,  11,  19,  16,   8,   7,  13,  24, 827]])"
      ]
     },
     "execution_count": 179,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "confusion_matrix(Y_test, Y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 2: Full training"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "prepare real train set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = train_df['im_name']\n",
    "\n",
    "X_train = X #use all data for training\n",
    "X_train_features = np.array([extract_color_hog_features(f'train_ims/{img}') for img in X_train]) #extract features for all data\n",
    "X_train = pca.transform(X_train_features) #reduce dimensionality of all data (same trained pca as the one we use in step 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [],
   "source": [
    "Y = train_df['label']\n",
    "Y_train = Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(50000, 300) (50000,)\n"
     ]
    }
   ],
   "source": [
    "print(X_train.shape, Y_train.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-5 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-5 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-5 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-5 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-5 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-5 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-5 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-5 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-5 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-5 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-5 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-5 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-5 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-5 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-5 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-5 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC(C=8, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;SVC<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.svm.SVC.html\">?<span>Documentation for SVC</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>SVC(C=8, random_state=42)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "SVC(C=8, random_state=42)"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "svm_model = SVC(kernel='rbf', C = 8, gamma='scale', random_state=42)  # RBF kernel with hyperparameter tuning\n",
    "svm_model.fit(X_train, Y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Prepare real test set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(10000, 300)\n"
     ]
    }
   ],
   "source": [
    "#create test set from test_df\n",
    "image_paths = test_df['im_name'].values\n",
    "image_paths = [f'test_ims/{path}' for path in image_paths]\n",
    "\n",
    "# Load and flatten all images\n",
    "feature_extracted_images = np.array([extract_color_hog_features(img_path) for img_path in image_paths])\n",
    "\n",
    "real_X_test = pca.transform(feature_extracted_images) #same pca for train_set data\n",
    "\n",
    "print(real_X_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = svm_model.predict(real_X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Submit to kaggle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>im_name</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>d59d350.jpg</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>d59e3e9.jpg</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>d59e68e.jpg</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>d59ef00.jpg</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>d59f154.jpg</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>d59fa50.jpg</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       im_name  label\n",
       "0  d59d350.jpg      2\n",
       "1  d59e3e9.jpg      9\n",
       "2  d59e68e.jpg      8\n",
       "3  d59ef00.jpg      7\n",
       "4  d59f154.jpg      9\n",
       "5  d59fa50.jpg      6"
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#create submission.csv with im_name same as test_df and label as y_pred\n",
    "submission = pd.DataFrame({'im_name': test_df['im_name'], 'label': y_pred})\n",
    "submission.head(6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [],
   "source": [
    "#save submission dataframe to csv\n",
    "submission.to_csv('submission.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100%|█████████████████████████████████████████| 137k/137k [00:01<00:00, 117kB/s]\n",
      "Successfully submitted to HKU COMP3314 A3 Image Classification Challenge"
     ]
    }
   ],
   "source": [
    "#uncomment and run this to submit the csv file to kaggle\n",
    "!kaggle competitions submit -c hku-comp3314-2024-1a-a3-image-classification-challenge -f submission.csv -m \"Eighteenth try\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
